openapi: 3.0.3
tags:
  - name: Manga
  - name: Author
  - name: Search
  - name: Auth
  - name: ScanlationGroup
  - name: Feed
  - name: CustomList
  - name: Captcha
  - name: AtHome
  - name: Legacy
  - name: Infrastructure
info:
  title: MangaDex API
  version: 5.0.0
  contact:
    name: MangaDex staff team
    email: mangadexstaff@gmail.com
  description: |-
    MangaDex is an ad-free manga reader offering high-quality images!

    Here is some generic stuff about the API

    # Authentication

    You can login with `/auth/login` endpoints. It will return a JWT that remains for 15min and that have a 4h refresh token.

    # Rating limits

    We are using rating limits in order to avoid too much calls on our endpoints, here is how is it configured:

    | Endpoint                | Calls            | Time frame                |
    |-------------------------|------------------|---------------------------|
    | `/account/create` | 1 | 60 minutes |
    | `/account/activate/{code}` | 30 | 60 minutes |
    | `/account/activate/resend`, `/account/recover`, `/account/recover/{code}` | 5 | 60 minutes |
    | `/auth/login` | 30 | 60 minutes |
    | `/auth/refresh` | 30 | 60 minutes |
    | `/chapter/{id}/read` | 300              | 10 minutes                |
    | `/upload/begin`, `/upload/{id}`, `/upload/{id}/commit` | 30               | 1 minute                  |
    | `PUT /chapter/{id}` | 10               | 1 minute                  |
    | `DELETE /chapter/{id}` | 10               | 1 minute                  |
    | `POST /manga` | 10               | 60 minutes                |
    | `PUT /manga/{id}` | 10               | 1 minute                  |
    | `DELETE /manga/{id}` | 10               | 10 minutes                |
    | `POST /group` | 10               | 60 minutes                |
    | `PUT /group/{id}` | 10               | 1 minute                  |
    | `DELETE /group/{id}` | 10               | 10 minutes                |
    | `POST /author` | 10               | 60 minutes                |
    | `PUT /author` | 10               | 1 minutes                 |
    | `DELETE /author/{id}` | 10               | 10 minutes                |
    | `POST /captcha/solve` | 10 | 10 minutes |

    You can get details about how your rate limit is going by reading following headers:

    | Header                  | Description                                              |
    |-------------------------|-----------------------------------------------------------|
    | X-RateLimit-Limit       | Number of max requests allowed in the current time period |
    | X-RateLimit-Remaining   | Number of remaining requests in the current time period   |
    | X-RateLimit-Retry-After | Timestamp of end of current time period as UNIX timestamp |

    # Captchas

    Some endpoints may require captchas to proceed, in order to slow down automated malicious traffic. Regular users might see a couple of captchas, based on the frequency of write requests or on certain endpoints like user signup.

    Once an endpoint decides that a captcha needs to be solved, a 403 Forbidden response will be returned, where the error title is `captcha_required_exception`.
    The sitekey needed for recaptcha to function is provided in both the `X-Captcha-Sitekey` header field, as well as in the error context, specified as the `siteKey` parameter.

    The captcha result of the client can either be passed into the repeated original request with the `X-Captcha-Result` header or alternatively the `POST /captcha/solve` endpoint can be called to solve this captcha. The time a solved captcha is remembered varies across different endpoints and can also be influenced by individual client behavior.

    Authentication is not required for the `POST /captcha/solve` endpoint, captchas are tracked separately for client ip and user id. If you are logged in, you want to send the session token so you validate the captcha for your client ip and user id at the same time, but it is not required.

    # Chapter pages processing

    ## Pages processing

    When you fetch a chapter response you'll have 4 fields that you need for pages processing:

    | Field                       | Type     | Description        |
    |-----------------------------|----------|--------------------|
    | `data.id`                   | `string` | API identifier     |
    | `data.attributes.hash`      | `string` | MD@H identifier    |
    | `data.attributes.data`      | `array`  | High quality pages |
    | `data.attributes.dataSaver` | `array`  | Low quality pages  |

    From this point you miss one thing: a MD@H backend server to get images from, to get that make a request to `GET /at-home/server/{data.id}`, it will return the server url to use.

    Then to build the pages, you have to build your url as following:
    `https://{md@h server node}/data/{data.attributes.hash}/{data.attributes.data}`

    Or if you want to use the low quality files:
    `https://{md@h server node}/data-saver/{data.attributes.hash}/{data.attributes.dataSaver}`

    Here is an example of what the url could looks like:

    | Field                       | Value |
    |-----------------------------|-------|
    | `data.id`                   | `000002b1-e8de-4281-9781-8e81e869f579` |
    | `data.attributes.hash`      | `caad0c22434276b9e3e56a78fe2e7993` |
    | `data.attributes.data`      | `["x1-a87ae6522fa5c244fd76985c7d953ccf3975bec66ce9b8e813549e642b38a47a.png", ...]` |
    | `data.attributes.dataSaver` | `["x1-a1d3047dfccd77b3117a86ccf19a9c5403e09baec6a78893ed1d3825d2c71256.jpg", ...]` |

    As a "fake" MD@H node we'll use `https://s2.mangadex.org/` server.

    So for high quality we'll have an URL like that: https://s2.mangadex.org/data/caad0c22434276b9e3e56a78fe2e7993/x1-a87ae6522fa5c244fd76985c7d953ccf3975bec66ce9b8e813549e642b38a47a.png

    And for low quality: https://s2.mangadex.org/data-saver/caad0c22434276b9e3e56a78fe2e7993/x1-a1d3047dfccd77b3117a86ccf19a9c5403e09baec6a78893ed1d3825d2c71256.jpg

    ## Report

    In order to make everything works well, we keep statistics over MD@H nodes and how they perform. In order to keep theses statistics you have to post data for each page you fetch from a MD@H node.

    Here is an example:
    ```curl
    POST https://api.mangadex.network/report
    {
      "url": "https://s2.mangadex.org/data/caad0c22434276b9e3e56a78fe2e7993/x1-a87ae6522fa5c244fd76985c7d953ccf3975bec66ce9b8e813549e642b38a47a.png",
      "success": true,
      "bytes": 800000, // size of the loaded image
      "duration": 213, // miliseconds to load the image
      "cached": false, // X-Cache header of the MDAH node == 'HIT' ?
    }
    ```

    # Static data

    ## Manga publication demographic

    | Value            | Description               |
    |------------------|---------------------------|
    | shonen           | Manga is a Shonen         |
    | shoujo           | Manga is a Shoujo         |
    | josei            | Manga is a Josei          |
    | seinen           | Manga is a Seinen         |

    ## Manga status

    | Value            | Description               |
    |------------------|---------------------------|
    | ongoing          | Manga is still going on   |
    | completed        | Manga is completed        |
    | hiatus           | Manga is paused           |
    | abandoned        | Manga has been abandoned  |

    ## Manga reading status

    | Value            |
    |------------------|
    | reading          |
    | on_hold          |
    | plan\_to\_read   |
    | dropped          |
    | re\_reading      |
    | completed        |

    ## Manga content rating

    | Value            | Description               |
    |------------------|---------------------------|
    | safe             | Safe content              |
    | suggestive       | Suggestive content        |
    | erotica          | Erotica content           |
    | pornographic     | Pornographic content      |

    ## CustomList visibility

    | Value            | Description               |
    |------------------|---------------------------|
    | public           | CustomList is public      |
    | private          | CustomList is private     |

    ## Relationship types

    | Value            | Description                    |
    |------------------|--------------------------------|
    | manga            | Manga resource                 |
    | chapter          | Chapter resource               |
    | author           | Author resource                |
    | artist           | Author resource (drawers only) |
    | scanlation_group | ScanlationGroup resource       |
    | tag              | Tag resource                   |
    | user             | User resource                  |
    | custom_list      | CustomList resource            |
servers:
  - url: 'https://api.mangadex.org'
    description: MangaDex Api
paths:
  /ping:
    get:
      summary: Ping the server
      tags:
        - Infrastructure
      security: []
      responses:
        '200':
          description: Pong
          content:
            application/json:
              schema:
                type: string
                default: pong
  /manga:
    get:
      summary: Manga list
      tags:
        - Manga
        - Search
      responses:
        '200':
          description: Manga list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MangaList'
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-search-manga
      description: Search a list of Manga.
      parameters:
        - schema:
            type: integer
            default: 10
            maximum: 100
          in: query
          name: limit
        - schema:
            type: integer
          in: query
          name: offset
        - schema:
            type: string
          in: query
          name: title
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: authors
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: artists
        - schema:
            type: integer
          in: query
          name: year
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: includedTags
        - schema:
            type: string
            enum:
              - AND
              - OR
            default: AND
          in: query
          name: includedTagsMode
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: excludedTags
        - schema:
            type: string
            enum:
              - AND
              - OR
            default: OR
          in: query
          name: excludedTagsMode
        - schema:
            type: array
            items:
              type: string
              enum:
                - ongoing
                - completed
                - hiatus
                - abandoned
          in: query
          name: status
        - schema:
            type: array
            items:
              type: string
              pattern: ^[a-zA-Z\-]{2,5}$
          in: query
          name: originalLanguage
        - schema:
            type: array
            items:
              type: string
              enum:
                - shonen
                - shoujo
                - josei
                - seinen
                - none
          in: query
          name: publicationDemographic
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: ids
          description: Manga ids (limited to 100 per request)
        - schema:
            type: array
            items:
              type: string
              enum:
                - safe
                - suggestive
                - erotica
                - pornographic
          in: query
          name: contentRating
        - schema:
            type: string
            description: "DateTime string with following format: YYYY-MM-DDTHH:MM:SS"
            pattern: ^\d{4}-[0-1]\d-([0-2]\d|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d$
          in: query
          name: createdAtSince
        - schema:
            type: string
            description: "DateTime string with following format: YYYY-MM-DDTHH:MM:SS"
            pattern: ^\d{4}-[0-1]\d-([0-2]\d|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d$
          in: query
          name: updatedAtSince
        - schema:
            type: object
            properties:
              createdAt:
                type: string
                enum:
                  - asc
                  - desc
              updatedAt:
                type: string
                enum:
                  - asc
                  - desc
          in: query
          name: order
      security: []
    post:
      summary: Create Manga
      operationId: post-manga
      responses:
        '200':
          description: Manga Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MangaResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MangaCreate'
        description: This body is limited to 16kb max per call.
      description: Create a new Manga.
      tags:
        - Manga
  '/manga/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Manga ID
    get:
      summary: View Manga
      tags:
        - Manga
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MangaResponse'
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-manga-id
      description: View Manga.
      security: []
    put:
      summary: Update Manga
      operationId: put-manga-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MangaResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MangaEdit'
        description: This body is limited to 16kb max per call.
      tags:
        - Manga
    delete:
      summary: Delete Manga
      operationId: delete-manga-id
      responses:
        '200':
          description: Manga has been deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Manga
  /auth/login:
    post:
      summary: Login
      tags:
        - Auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
      operationId: post-auth-login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        description: This body is limited to 2kb max per call.
      security: []
  /auth/check:
    get:
      summary: Check token
      tags:
        - Auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckResponse'
      operationId: get-auth-check
  /auth/logout:
    post:
      summary: Logout
      tags:
        - Auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: post-auth-logout
  /auth/refresh:
    post:
      summary: Refresh token
      tags:
        - Auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshResponse'
      operationId: post-auth-refresh
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
        description: This body is limited to 2kb max per call.
      security: []
  /account/create:
    post:
      summary: Create Account
      operationId: post-account-create
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccount'
        description: This body is limited to 4kb max per call.
      tags:
        - Account
  '/account/activate/{code}':
    parameters:
      - schema:
          type: string
          pattern: '[0-9a-fA-F-]+'
        name: code
        in: path
        required: true
    get:
      summary: Activate account
      tags:
        - Account
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountActivateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-account-activate-code
      parameters: []
      security: []
  /group:
    get:
      summary: Scanlation Group list
      tags:
        - ScanlationGroup
        - Search
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanlationGroupList'
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-search-group
      parameters:
        - schema:
            type: integer
            default: 10
            maximum: 100
          in: query
          name: limit
        - schema:
            type: integer
          in: query
          name: offset
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: ids
          description: ScanlationGroup ids (limited to 100 per request)
        - schema:
            type: string
          in: query
          name: name
      security: []
    post:
      summary: Create Scanlation Group
      operationId: post-group
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanlationGroupResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - ScanlationGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScanlationGroup'
        description: This body is limited to 8kb max per call.
  '/group/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Scanlation Group ID
    get:
      summary: View Scanlation Group
      tags:
        - ScanlationGroup
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanlationGroupResponse'
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-group-id
      security: []
    put:
      summary: Update Scanlation Group
      operationId: put-group-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanlationGroupResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - ScanlationGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanlationGroupEdit'
        description: This body is limited to 8kb max per call.
    delete:
      summary: Delete Scanlation Group
      operationId: delete-group-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - ScanlationGroup
  '/group/{id}/follow':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
    post:
      summary: Follow Scanlation Group
      operationId: post-group-id-follow
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - ScanlationGroup
    delete:
      summary: Unfollow Scanlation Group
      operationId: delete-group-id-follow
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - ScanlationGroup
  /list:
    post:
      summary: Create CustomList
      operationId: post-list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - CustomList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomListCreate'
        description: This body is limited to 8kb max per call.
  '/list/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: CustomList ID
    get:
      summary: Get CustomList
      tags:
        - CustomList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomListResponse'
        '204':
          description: No Content
      operationId: get-list-id
    put:
      summary: Update CustomList
      operationId: put-list-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - CustomList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomListEdit'
      description: This body is limited to 8kb max per call.
    delete:
      summary: Delete CustomList
      operationId: delete-list-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - CustomList
  '/manga/{id}/list/{listId}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Manga ID
      - schema:
          type: string
          format: uuid
        name: listId
        in: path
        required: true
        description: CustomList ID
    post:
      summary: Add Manga in CustomList
      operationId: post-manga-id-list-listId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Manga
        - CustomList
    delete:
      summary: Remove Manga in CustomList
      operationId: delete-manga-id-list-listId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - CustomList
        - Manga
  /user/list:
    get:
      summary: Get logged User CustomList list
      tags:
        - CustomList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomListList'
      operationId: get-user-list
      parameters:
        - schema:
            type: integer
            default: 10
            maximum: 100
          in: query
          name: limit
        - schema:
            type: integer
          in: query
          name: offset
      description: 'This will list public and private CustomList '
  '/user/{id}/list':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: User ID
    get:
      summary: Get User's CustomList list
      tags:
        - CustomList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomListList'
      operationId: get-user-id-list
      parameters:
        - schema:
            type: integer
            default: 10
            maximum: 100
          in: query
          name: limit
        - schema:
            type: integer
          in: query
          name: offset
      description: This will list only public CustomList
  '/user/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: User ID
    get:
      summary: Get User
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
      operationId: get-user-id
  /chapter:
    parameters: []
    get:
      summary: Chapter list
      description: Chapter list, if you want Chapters for a given Manga, please check at feeds endpoints.
      operationId: get-chapter
      responses:
        '200':
          description: Chapter list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterList'
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      parameters:
        - schema:
            type: integer
            default: 10
            maximum: 100
          in: query
          name: limit
        - schema:
            type: integer
          in: query
          name: offset
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: ids
          description: Chapter ids (limited to 100 per request)
        - schema:
            type: string
          in: query
          name: title
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: groups
        - schema:
            type: string
            format: uuid
          in: query
          name: uploader
        - schema:
            type: string
            format: uuid
          in: query
          name: manga
        - schema:
            type: string
          in: query
          name: volume
        - schema:
            type: string
          in: query
          name: chapter
        - schema:
            type: string
            pattern: '^[a-zA-Z\-]{2,5}$'
          in: query
          name: translatedLanguage
        - schema:
            type: string
            description: "DateTime string with following format: YYYY-MM-DDTHH:MM:SS"
            pattern: ^\d{4}-[0-1]\d-([0-2]\d|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d$
          in: query
          name: createdAtSince
        - schema:
            type: string
            description: "DateTime string with following format: YYYY-MM-DDTHH:MM:SS"
            pattern: ^\d{4}-[0-1]\d-([0-2]\d|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d$
          in: query
          name: updatedAtSince
        - schema:
            type: string
            description: "DateTime string with following format: YYYY-MM-DDTHH:MM:SS"
            pattern: ^\d{4}-[0-1]\d-([0-2]\d|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d$
          in: query
          name: publishAtSince
        - schema:
            type: object
            properties:
              createdAt:
                type: string
                enum:
                  - asc
                  - desc
              updatedAt:
                type: string
                enum:
                  - asc
                  - desc
              publishAt:
                type: string
                enum:
                  - asc
                  - desc
          in: query
          name: order
      tags:
        - Chapter
        - Search
      security: []
  '/chapter/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Chapter ID
    get:
      summary: Get Chapter
      tags:
        - Chapter
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterResponse'
              examples:
                example-1:
                  value:
                    result: ok
                    data:
                      id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                      type: chapter
                      attributes:
                        title: string
                        volume: null
                        chapter: null
                        translatedLanguage: jp
                        pages:
                          - string
                        checksums:
                          - property1: string
                            property2: string
                        uploader: 4df808f4-cdf8-4d1c-80e6-4af8e6ce09b8
                        version: 1
                        groups:
                          - 497f6eca-6276-4993-bfeb-53cbbbba6f08
                        manga: e7116dd3-e4ad-4d10-a3ef-6a64d730c341
                    relationships:
                      - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                        type: string
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-chapter-id
      security: []
    put:
      summary: Update Chapter
      operationId: put-chapter-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChapterEdit'
        description: This body is limited to 32kb max per call.
      tags:
        - Chapter
    delete:
      summary: Delete Chapter
      operationId: delete-chapter-id
      responses:
        '200':
          description: Chapter has been deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Manga
  /user/follows/manga/feed:
    get:
      summary: Get logged User followed Manga feed
      tags:
        - Manga
        - Feed
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
      operationId: get-user-follows-manga-feed
      parameters:
        - schema:
            type: integer
            default: 100
            maximum: 500
          in: query
          name: limit
        - schema:
            type: integer
          in: query
          name: offset
        - schema:
            type: array
            items:
              type: string
              pattern: '^[a-zA-Z\-]{2,5}$'
          in: query
          name: locales
        - schema:
            type: string
            description: "DateTime string with following format: YYYY-MM-DDTHH:MM:SS"
            pattern: ^\d{4}-[0-1]\d-([0-2]\d|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d$
          in: query
          name: createdAtSince
        - schema:
            type: string
            description: "DateTime string with following format: YYYY-MM-DDTHH:MM:SS"
            pattern: ^\d{4}-[0-1]\d-([0-2]\d|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d$
          in: query
          name: updatedAtSince
        - schema:
            type: string
            description: "DateTime string with following format: YYYY-MM-DDTHH:MM:SS"
            pattern: ^\d{4}-[0-1]\d-([0-2]\d|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d$
          in: query
          name: publishAtSince
  '/list/{id}/feed':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
    get:
      summary: CustomList Manga feed
      tags:
        - CustomList
        - Feed
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-list-id-feed
      parameters:
        - schema:
            type: integer
            default: 100
            maximum: 500
          in: query
          name: limit
        - schema:
            type: integer
          in: query
          name: offset
        - schema:
            type: array
            items:
              type: string
              pattern: '^[a-zA-Z\-]{2,5}$'
          in: query
          name: locales
        - schema:
            type: string
            description: "DateTime string with following format: YYYY-MM-DDTHH:MM:SS"
            pattern: ^\d{4}-[0-1]\d-([0-2]\d|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d$
          in: query
          name: createdAtSince
        - schema:
            type: string
            description: "DateTime string with following format: YYYY-MM-DDTHH:MM:SS"
            pattern: ^\d{4}-[0-1]\d-([0-2]\d|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d$
          in: query
          name: updatedAtSince
        - schema:
            type: string
            description: "DateTime string with following format: YYYY-MM-DDTHH:MM:SS"
            pattern: ^\d{4}-[0-1]\d-([0-2]\d|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d$
          in: query
          name: publishAtSince
  '/manga/{id}/follow':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
    delete:
      summary: Unfollow Manga
      operationId: delete-manga-id-follow
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Manga
    post:
      summary: Follow Manga
      operationId: post-manga-id-follow
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Manga
  /author:
    get:
      summary: Author list
      tags:
        - Author
        - Search
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorList'
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-author
      parameters:
        - schema:
            type: integer
            default: 10
            maximum: 100
          in: query
          name: limit
        - schema:
            type: integer
          in: query
          name: offset
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: ids
          description: Author ids (limited to 100 per request)
        - schema:
            type: string
          in: query
          name: name
      security: []
    post:
      summary: Create Author
      operationId: post-author
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Author
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorCreate'
        description: This body is limited to 2kb max per call.
  '/author/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Author ID
    get:
      summary: Get Author
      tags:
        - Author
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorResponse'
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-author-id
      security: []
    put:
      summary: Update Author
      operationId: put-author-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorEdit'
        description: This body is limited to 2kb max per call.
      tags:
        - Author
    delete:
      summary: Delete Author
      operationId: delete-author-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Author
  /legacy/mapping:
    post:
      summary: Legacy ID mapping
      operationId: post-legacy-mapping
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MappingIdResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Legacy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MappingIdBody'
        description: This body is limited to 10kb max per call.
      security: []
  '/manga/{id}/feed':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Manga ID
    get:
      summary: Manga feed
      tags:
        - Manga
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-manga-id-feed
      parameters:
        - schema:
            type: integer
            default: 100
            maximum: 500
          in: query
          name: limit
        - schema:
            type: integer
          in: query
          name: offset
        - schema:
            type: array
            items:
              type: string
              pattern: '^[a-zA-Z\-]{2,5}$'
          in: query
          name: locales
        - schema:
            type: string
            description: "DateTime string with following format: YYYY-MM-DDTHH:MM:SS"
            pattern: ^\d{4}-[0-1]\d-([0-2]\d|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d$
          in: query
          name: createdAtSince
        - schema:
            type: string
            description: "DateTime string with following format: YYYY-MM-DDTHH:MM:SS"
            pattern: ^\d{4}-[0-1]\d-([0-2]\d|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d$
          in: query
          name: updatedAtSince
        - schema:
            type: string
            description: "DateTime string with following format: YYYY-MM-DDTHH:MM:SS"
            pattern: ^\d{4}-[0-1]\d-([0-2]\d|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d$
          in: query
          name: publishAtSince
      security: []
  '/manga/{id}/read':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
    get:
      summary: Manga read markers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    enum:
                      - ok
                  data:
                    type: array
                    items:
                      type: string
                      format: uuid
              examples:
                example-1:
                  value:
                    result: ok
                    data:
                      - 00057883-357b-4734-9469-52967e59ef4c
                      - 000b7978-d9bd-49ec-a8f6-a0737368415f
                      - 0015b621-a175-47f5-81fb-5976c88e18c4
      operationId: get-manga-chapter-readmarkers
      description: A list of chapter ids that are marked as read for the specified manga
      tags:
        - Manga
  '/chapter/{id}/read':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
    post:
      summary: Mark Chapter read
      tags:
        - Chapter
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    enum:
                      - ok
                      - ko
      operationId: chapter-id-read
      description: Mark chapter as read for the current user
    delete:
      summary: Mark Chapter unread
      tags:
        - Chapter
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    enum:
                      - ok
                      - ko
      operationId: chapter-id-unread
      description: Mark chapter as unread for the current user
  /manga/random:
    get:
      summary: Get a random Manga
      tags:
        - Manga
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MangaResponse'
      operationId: get-manga-random
      parameters: []
      security: []
  '/at-home/server/{chapterId}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: chapterId
        in: path
        required: true
        description: Chapter ID
    get:
      summary: Get MD@Home node URL
      tags:
        - AtHome
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  baseUrl:
                    type: string
                    description: MD@Home server URL
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-at-home-server-chapterId
      parameters:
        - schema:
            type: boolean
            default: false
          in: query
          name: ssl
      security: []
  /manga/tag:
    get:
      summary: Tag list
      tags:
        - Manga
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagResponse'
      operationId: get-manga-tag
      security: []
  /account/activate/resend:
    post:
      summary: Resend Activation code
      operationId: post-account-activate-resend
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountActivateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendAccountActivationCode'
        description: This body is limited to 1kb max per call.
      security: []
  /account/recover:
    post:
      summary: Recover given Account
      operationId: post-account-recover
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountActivateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: ''
      tags:
        - Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendAccountActivationCode'
        description: This body is limited to 1kb max per call.
      security: []
  '/account/recover/{code}':
    parameters:
      - schema:
          type: string
        name: code
        in: path
        required: true
    post:
      summary: Complete Account recover
      operationId: post-account-recover-code
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountActivateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecoverCompleteBody'
        description: This body is limited to 2kb max per call.
      security: []
  /user/me:
    get:
      summary: Logged User details
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
      operationId: get-user-me
  /user/follows/group:
    get:
      summary: Get logged User followed Groups
      tags:
        - ScanlationGroup
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanlationGroupList'
      operationId: get-user-follows-group
      parameters:
        - schema:
            type: integer
            default: 10
            maximum: 100
          in: query
          name: limit
        - schema:
            type: integer
          in: query
          name: offset
  /user/follows/user:
    get:
      summary: Get logged User followed User list
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
      operationId: get-user-follows-user
      parameters:
        - schema:
            type: integer
            default: 10
            maximum: 100
          in: query
          name: limit
        - schema:
            type: integer
          in: query
          name: offset
  /user/follows/manga:
    get:
      summary: Get logged User followed Manga list
      tags:
        - Manga
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MangaList'
      operationId: get-user-follows-manga
      parameters:
        - schema:
            type: integer
            default: 10
            maximum: 100
          in: query
          name: limit
        - schema:
            type: integer
          in: query
          name: offset
  /manga/status:
    get:
      summary: Get all Manga reading status for logged User
      operationId: get-manga-status
      tags:
        - Manga
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    default: ok
                  statuses:
                    type: object
                    additionalProperties:
                      type: string
                      enum:
                        - reading
                        - on_hold
                        - plan_to_read
                        - dropped
                        - re_reading
                        - completed
                example:
                  result: ok
                  statuses:
                    b019ea5d-5fe6-44d4-abbc-f546f210884d: reading
                    2394a5c7-1d2e-461f-acde-18726b9e37d6: dropped
  '/manga/{id}/status':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
    post:
      summary: Update Manga reading status
      operationId: post-manga-id-status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Manga
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMangaStatus'
        description: Using a `null` value in `status` field will remove the Manga reading status. This body is limited to 2kb max per call.
  /captcha/solve:
    post:
      summary: Solve Captcha
      tags:
        - Captcha
      responses:
        '200':
          description: 'OK: Captcha has been solved'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    enum:
                      - ok
                      - ko
        '400':
          description: 'Bad Request: Captcha challenge result was wrong, the Captcha Verification service was down or other, refer to the error message and the errorCode inside the error context'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: post-captcha-solve
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                captchaChallenge:
                  type: string
                  minLength: 1
              required:
                - captchaChallenge
            examples:
              example-1:
                value:
                  captchaChallenge: string
      description: |-
        Captchas can be solved explicitly through this endpoint, another way is to add a `X-Captcha-Result` header to any request. The same logic will verify the captcha and is probably more convenient because it takes one less request.

        Authentication is optional. Captchas are tracked for both the client ip and for the user id, if you are logged in you want to send your session token but that is not required.
      security:
        - Bearer: []
components:
  schemas:
    MangaRequest:
      description: ''
      type: object
      title: MangaRequest
      properties:
        title:
          $ref: '#/components/schemas/LocalizedString'
        altTitles:
          type: array
          items:
            $ref: '#/components/schemas/LocalizedString'
        description:
          $ref: '#/components/schemas/LocalizedString'
        authors:
          type: array
          items:
            type: string
            format: uuid
        artists:
          type: array
          items:
            type: string
            format: uuid
        links:
          type: array
          additionalProperties:
            type: string
          items:
            type: object
        originalLanguage:
          type: string
          pattern: '^[a-zA-Z\-]{2,5}$'
        lastVolume:
          type: integer
          nullable: true
          minimum: 0
        lastChapter:
          type: integer
          nullable: true
          minimum: 0
        publicationDemographic:
          type: string
          nullable: true
          enum:
            - shonen
            - shoujo
            - josei
            - seinen
        status:
          type: string
          nullable: true
          enum:
            - ongoing
            - completed
            - hiatus
            - abandoned
        year:
          type: integer
          maximum: 9999
          minimum: 1
        contentRating:
          type: string
          nullable: true
          enum:
            - hentai
            - ecchi
        modNotes:
          type: string
          nullable: true
        version:
          type: integer
          minimum: 1
    LocalizedString:
      type: object
      title: LocalizedString
      additionalProperties:
        type: string
        pattern: "^[a-z]{2,8}$"
    MangaResponse:
      title: MangaResponse
      type: object
      properties:
        result:
          type: string
          enum:
            - ok
            - ko
        data:
          $ref: '#/components/schemas/Manga'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'
    ChapterResponse:
      title: ChapterResponse
      type: object
      properties:
        result:
          type: string
          enum:
            - ok
            - ko
        data:
          $ref: '#/components/schemas/Chapter'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'
    Relationship:
      title: Relationship
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
    Chapter:
      title: Chapter
      type: object
      x-examples:
        example:
          id: a05de006-df86-4fe1-9d20-32664a78c1cc
          type: chapter
          attributes:
            title: Chapter title
            volume: 1
            chapter: '15.1'
            uploader:
              id: 23d52040-3a77-4ffe-84dd-6dbf259e32ed
              type: user
              attributes: []
            manga:
              id: 439ea5a9-e922-44d1-b9c1-a3e1158bd55f
              type: manga
              attributes: []
            groups:
              - id: cb4cf9ac-ee21-486f-ab0f-21b17ba0ab7f
                type: scanlation_group
                attributes: []
            translatedLanguage: en
            pages:
              - 1.jpg
              - 2.jpg
              - 3.jpg
            checksums:
              default:
                1.jpg: 64a0f5b9d22053b311f1d34cae7183763281350354f2a0b0e552315c38843e0f
                2.jpg: 64a0f5b9d22053b311f1d34cae7183763281350354f2a0b0e552315c38843e0f
                3.jpg: 64a0f5b9d22053b311f1d34cae7183763281350354f2a0b0e552315c38843e0f
              data-saver:
                1.jpg: 64a0f5b9d22053b311f1d34cae7183763281350354f2a0b0e552315c38843e0f
                2.jpg: 64a0f5b9d22053b311f1d34cae7183763281350354f2a0b0e552315c38843e0f
                3.jpg: 64a0f5b9d22053b311f1d34cae7183763281350354f2a0b0e552315c38843e0f
            version: 1
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - chapter
        attributes:
          $ref: '#/components/schemas/ChapterAttributes'
    Manga:
      title: Manga
      type: object
      x-examples:
        example:
          id: a05de006-df86-4fe1-9d20-32664a78c1cc
          type: manga
          attributes:
            title:
              en: English title
              de: Deutscher Titel
              jp: 日本語題名
            altTitles:
              - en: Secondary english title
              - en: Third english title
              - romaji: Romaji title
            description:
              en: Nice description
            isLocked: false
            originalLanguage: jp
            year: 2020
            version: 1
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - manga
        attributes:
          $ref: '#/components/schemas/MangaAttributes'
    ErrorResponse:
      title: ErrorResponse
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    Error:
      title: Error
      type: object
      properties:
        id:
          type: string
        status:
          type: integer
        title:
          type: string
        detail:
          type: string
    ChapterAttributes:
      title: ChapterAttributes
      type: object
      properties:
        title:
          type: string
          maxLength: 255
        volume:
          type: integer
          nullable: true
          minimum: 0
        chapter:
          type: string
          nullable: true
          maxLength: 8
        translatedLanguage:
          type: string
          pattern: '^[a-zA-Z\-]{2,5}$'
        hash:
          type: string
        data:
          type: array
          items:
            type: string
        dataSaver:
          type: array
          items:
            type: string
        uploader:
          type: string
          format: uuid
        version:
          type: integer
          minimum: 1
        createdAt:
          type: string
        updatedAt:
          type: string
        publishAt:
          type: string
    MangaAttributes:
      title: MangaAttributes
      type: object
      properties:
        title:
          type: object
          additionalProperties:
            type: string
        altTitles:
          type: array
          items: {}
        description:
          type: object
          additionalProperties:
            type: string
        isLocked:
          type: boolean
        links:
          type: array
          nullable: true
          items: {}
        originalLanguage:
          type: string
        lastVolume:
          type: string
          nullable: true
        lastChapter:
          type: string
          nullable: true
        publicationDemographic:
          type: string
          nullable: true
        status:
          type: string
          nullable: true
        year:
          type: integer
        contentRating:
          type: string
          nullable: true
        tags:
          type: array
          items: {}
        version:
          type: integer
          minimum: 1
        createdAt:
          type: string
        updatedAt:
          type: string
    MangaCreate:
      allOf:
        - $ref: '#/components/schemas/MangaRequest'
        - required:
            - title
    MangaEdit:
      allOf:
        - $ref: '#/components/schemas/MangaRequest'
        - required:
            - version
    ChapterEdit:
      allOf:
        - $ref: '#/components/schemas/ChapterRequest'
        - required:
            - version
    Response:
      title: Response
      type: object
      properties:
        result:
          type: string
          enum:
            - ok
            - error
    Login:
      type: object
      title: Login
      additionalProperties: false
      properties:
        username:
          type: string
          minLength: 1
          maxLength: 64
        password:
          type: string
          minLength: 8
          maxLength: 1024
      required:
        - username
        - password
    LoginResponse:
      title: LoginResponse
      type: object
      properties:
        result:
          type: string
          enum:
            - ok
            - ko
        token:
          type: object
          properties:
            session:
              type: string
            refresh:
              type: string
    CheckResponse:
      title: CheckResponse
      type: object
      description: ''
      properties:
        ok:
          type: string
          enum:
            - ok
            - ko
        isAuthenticated:
          type: boolean
        roles:
          type: array
          items:
            type: string
        permissions:
          type: array
          items:
            type: string
    LogoutResponse:
      title: LogoutResponse
      type: object
      properties:
        result:
          type: string
          enum:
            - ok
            - error
    RefreshToken:
      type: object
      title: RefreshToken
      additionalProperties: false
      properties:
        token:
          type: string
          minLength: 1
      required:
        - token
    RefreshResponse:
      title: RefreshResponse
      type: object
      properties:
        result:
          type: string
          enum:
            - ok
            - error
        token:
          type: object
          properties:
            session:
              type: string
            refresh:
              type: string
        message:
          type: string
      required:
        - result
    AccountActivateResponse:
      title: AccountActivateResponse
      type: object
      properties:
        result:
          type: string
          enum:
            - ok
    CreateAccount:
      title: CreateAccount
      type: object
      properties:
        username:
          type: string
          minLength: 1
          maxLength: 64
        password:
          type: string
          minLength: 8
          maxLength: 1024
        email:
          type: string
          format: email
      required:
        - username
        - password
        - email
    ScanlationGroupResponse:
      title: ScanlationGroupResponse
      type: object
      properties:
        result:
          type: string
          enum:
            - ok
        data:
          $ref: '#/components/schemas/ScanlationGroup'
        relationships:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              type:
                type: string
    ScanlationGroup:
      title: ScanlationGroup
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - scanlation_group
        attributes:
          $ref: '#/components/schemas/ScanlationGroupAttributes'
    ScanlationGroupAttributes:
      title: ScanlationGroupAttributes
      type: object
      properties:
        name:
          type: string
        leader:
          $ref: '#/components/schemas/User'
        version:
          type: integer
          minimum: 1
        createdAt:
          type: string
        updatedAt:
          type: string
    User:
      title: User
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - user
        attributes:
          $ref: '#/components/schemas/UserAttributes'
    UserAttributes:
      title: UserAttributes
      type: object
      properties:
        username:
          type: string
        version:
          type: integer
          minimum: 1
    CreateScanlationGroup:
      title: CreateScanlationGroup
      type: object
      properties:
        name:
          type: string
        leader:
          type: string
          format: uuid
        members:
          type: array
          items:
            type: string
            format: uuid
        version:
          type: integer
      required:
        - name
    ScanlationGroupEdit:
      title: ScanlationGroupEdit
      type: object
      properties:
        name:
          type: string
        leader:
          type: string
          format: uuid
        members:
          type: array
          items:
            type: string
            format: uuid
        version:
          type: integer
          minimum: 1
      required:
        - version
    CustomListCreate:
      title: CustomListCreate
      type: object
      properties:
        name:
          type: string
        visibility:
          type: string
          enum:
            - public
            - private
        manga:
          type: array
          items:
            type: string
            format: uuid
        version:
          type: integer
      required:
        - name
    CustomListEdit:
      title: CustomListEdit
      type: object
      properties:
        name:
          type: string
        visibility:
          type: string
          enum:
            - public
            - private
        manga:
          type: array
          items:
            type: string
            format: uuid
        version:
          type: integer
          minimum: 1
      required:
        - version
    CustomListResponse:
      title: CustomListResponse
      type: object
      properties:
        result:
          type: string
          enum:
            - ok
            - error
        data:
          $ref: '#/components/schemas/CustomList'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'
    CustomList:
      title: CustomList
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - custom_list
        attributes:
          $ref: '#/components/schemas/CustomListAttributes'
    CustomListAttributes:
      title: CustomListAttributes
      type: object
      properties:
        name:
          type: string
        visibility:
          type: string
          enum:
            - private
            - public
        owner:
          $ref: '#/components/schemas/User'
        version:
          type: integer
          minimum: 1
    AuthorResponse:
      title: AuthorResponse
      type: object
      properties:
        result:
          type: string
        data:
          $ref: '#/components/schemas/Author'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'
    Author:
      title: Author
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - author
        attributes:
          $ref: '#/components/schemas/AuthorAttributes'
    AuthorAttributes:
      title: AuthorAttributes
      type: object
      properties:
        name:
          type: string
        imageUrl:
          type: string
        biography:
          type: object
          additionalProperties:
            type: string
        version:
          type: integer
        createdAt:
          type: string
        updatedAt:
          type: string
    AuthorEdit:
      title: AuthorEdit
      type: object
      properties:
        name:
          type: string
        version:
          type: integer
          minimum: 1
      required:
        - version
    AuthorCreate:
      type: object
      title: AuthorCreate
      additionalProperties: false
      properties:
        name:
          type: string
        version:
          type: integer
          minimum: 1
      required:
        - name
    MappingIdBody:
      type: object
      title: MappingIdBody
      additionalProperties: false
      properties:
        type:
          type: string
          enum:
            - group
            - manga
            - chapter
            - tag
        ids:
          type: array
          items:
            type: integer
    MappingIdResponse:
      title: MappingIdResponse
      type: object
      properties:
        result:
          type: string
          enum:
            - ok
        data:
          $ref: '#/components/schemas/MappingId'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'
    MappingId:
      title: MappingId
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - mapping_id
        attributes:
          $ref: '#/components/schemas/MappingIdAttributes'
    MappingIdAttributes:
      title: MappingIdAttributes
      type: object
      properties:
        type:
          type: string
          enum:
            - manga
            - chapter
            - group
            - tag
        legacyId:
          type: integer
        newId:
          type: string
          format: uuid
    TagResponse:
      title: TagResponse
      type: object
      properties:
        result:
          type: string
          enum:
            - ok
        data:
          $ref: '#/components/schemas/Tag'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'
    Tag:
      title: Tag
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - tag
        attributes:
          $ref: '#/components/schemas/TagAttributes'
    TagAttributes:
      title: TagAttributes
      type: object
      properties:
        name:
          type: object
          additionalProperties:
            type: string
        version:
          type: integer
          minimum: 1
    UserResponse:
      title: UserResponse
      type: object
      properties:
        result:
          type: string
          enum:
            - ok
        data:
          $ref: '#/components/schemas/User'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'
    SendAccountActivationCode:
      type: object
      title: SendAccountActivationCode
      additionalProperties: false
      properties:
        email:
          type: string
          format: email
      required:
        - email
    RecoverCompleteBody:
      type: object
      title: RecoverCompleteBody
      additionalProperties: false
      properties:
        newPassword:
          type: string
          minLength: 8
          maxLength: 1024
      required:
        - newPassword
    UpdateMangaStatus:
      title: UpdateMangaStatus
      type: object
      properties:
        status:
          type: string
          nullable: true
          enum:
            - reading
            - on_hold
            - plan_to_read
            - dropped
            - re_reading
            - completed
      required:
        - status
    ChapterRequest:
      title: ChapterRequest
      type: object
      properties:
        title:
          type: string
          maxLength: 255
        volume:
          type: integer
          nullable: true
          minimum: 0
        chapter:
          type: string
          nullable: true
          maxLength: 8
        translatedLanguage:
          type: string
          pattern: '^[a-zA-Z\-]{2,5}$'
        pages:
          type: array
          items:
            type: string
        checksums:
          type: array
          items:
            type: object
            additionalProperties:
              type: string
        version:
          type: integer
          minimum: 1
    AuthorList:
      title: AuthorList
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/AuthorResponse'
        limit:
          type: integer
        offset:
          type: integer
        total:
          type: integer
    ChapterList:
      title: ChapterList
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/ChapterResponse'
        limit:
          type: integer
        offset:
          type: integer
        total:
          type: integer
    ScanlationGroupList:
      title: ScanlationGroupList
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/ScanlationGroupResponse'
        limit:
          type: integer
        offset:
          type: integer
        total:
          type: integer
    MangaList:
      title: MangaList
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/MangaResponse'
        limit:
          type: integer
        offset:
          type: integer
        total:
          type: integer
    CustomListList:
      title: CustomListList
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/CustomListResponse'
        limit:
          type: integer
        offset:
          type: integer
        total:
          type: integer
    UserList:
      title: UserList
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
        limit:
          type: integer
        offset:
          type: integer
        total:
          type: integer
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
security:
  - Bearer: []
